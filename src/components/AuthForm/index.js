import React, { useEffect, useState } from "react";
import { Link, useLocation, useNavigate } from "react-router-dom";
import { useForm } from "react-hook-form";
import { jwtDecode } from "jwt-decode";
import { toast } from "react-toastify";
import { FaEye, FaEyeSlash } from "react-icons/fa";
import { useDispatch } from "react-redux";
import { loginUser } from "../../redux/userSlice";
import {
  login,
  registerUser,
  handleGoogleLogin,
} from "../../services/authService";
import styles from "./AuthForm.module.scss";
import loginImage from "images/login.png";
import logo_fb from "images/logo_fb_login.png";
import logo_gg from "images/logo_gg_login.png";
import { GoogleOAuthProvider } from "@react-oauth/google";

const CLIENT_ID =
  "749101402068-0jv96otqmnla2k4dgbs0pgo8e9hkaq5d.apps.googleusercontent.com";

const AuthForm = ({ type }) => {
  const [currentTab, setCurrentTab] = useState(type || "login");
  const [passwordVisible, setPasswordVisible] = useState(false);
  const [confirmPasswordVisible, setConfirmPasswordVisible] = useState(false);
  const location = useLocation();
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const {
    register,
    handleSubmit,
    formState: { errors },
    getValues,
  } = useForm();

  useEffect(() => {
    setCurrentTab(type || "login");
  }, [type]);

  const onSubmit = async (data) => {
    if (currentTab === "login") {
      try {
        const response = await login({
          email: data.email,
          passWord: data.passWord,
        });
        if (response && response.data.accessToken) {
          // Check isActive status
          if (response.data.isActive === 0) {
            toast.error("Vui l√≤ng x√°c nh·∫≠n t√†i kho·∫£n c·ªßa b·∫°n qua email");
            return;
          }

          const token = response.data.accessToken;
          const refreshToken = response.data.refreshToken;
          const decodedToken = jwtDecode(token);

          const user = {
            token,
            refreshToken,
            id: decodedToken.UserId,
            username:
              decodedToken[
                "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"
              ],
            email:
              decodedToken[
                "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress"
              ],
            role: decodedToken[
              "http://schemas.microsoft.com/ws/2008/06/identity/claims/role"
            ],
          };

          dispatch(loginUser({ user }));
          toast.success("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");

          if (user.role === "ADMIN") {
            navigate("/admin");
          } else if (user.role === "STAFF") {
            navigate("/");
          } else {
            navigate("/");
          }
        } else {
          toast.error("ƒêƒÉng nh·∫≠p th·∫•t b·∫°i! Ki·ªÉm tra l·∫°i th√¥ng tin ƒëƒÉng nh·∫≠p.");
        }
      } catch (error) {
        console.log(error);
        toast.error("Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng ƒë√∫ng!");
      }
    } else {
      try {
        const registerData = {
          userName: data.username,
          passWord: data.passWord,
          email: data.email,
          confirmPassWord: data.confirmPassWord,
          phoneNumber: data.phone,
        };
        const response = await registerUser(registerData);
        if (response) {
          toast.success(
            "ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng x√°c nh·∫≠n t√†i kho·∫£n qua email."
          );
          navigate("/login");
        } else {
          toast.error("ƒêƒÉng k√Ω th·∫•t b·∫°i! Vui l√≤ng th·ª≠ l·∫°i.");
        }
      } catch (error) {
        console.log(error);
        toast.error(error.response?.data?.message || "ƒêƒÉng k√Ω th·∫•t b·∫°i!");
      }
    }
  };

  useEffect(() => {
    const params = new URLSearchParams(location.search);
    const token = params.get("token");

    if (token) {
      try {
        const decoded = jwtDecode(token);

        const user = {
          token,
          id: decoded.UserId,
          username:
            decoded[
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"
            ],
          email:
            decoded[
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress"
            ],
          role: decoded[
            "http://schemas.microsoft.com/ws/2008/06/identity/claims/role"
          ],
        };

        dispatch(loginUser({ user }));
        toast.success("ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng!");

        // X√≥a token kh·ªèi URL
        navigate(location.pathname, { replace: true });

        if (user.role === "ADMIN") {
          navigate("/admin");
        } else {
          navigate("/");
        }
      } catch (err) {
        console.error("Token kh√¥ng h·ª£p l·ªá", err);
        toast.error("Token kh√¥ng h·ª£p l·ªá!");
      }
    }
  }, [location.search, dispatch, navigate, location.pathname]);

  return (
    <>
      <GoogleOAuthProvider clientId={CLIENT_ID}>
        <div className={styles.container_auth}>
          {/* Beautiful floating elements */}
          <div className={`${styles.floating_element} ${styles.element1}`}>
            üå∏
          </div>
          <div className={`${styles.floating_element} ${styles.element2}`}>
            üí´
          </div>
          <div className={`${styles.floating_element} ${styles.element3}`}>
            ‚ú®
          </div>
          <div className={`${styles.floating_element} ${styles.element4}`}>
            ü¶ã
          </div>
          <div className={`${styles.floating_element} ${styles.element5}`}>
            üå∫
          </div>

          <div className={styles.auth_container}>
            <div className={styles.auth_header}>
              <div className={styles.brand_logo}>
                <div className={styles.logo_text}>PURE</div>
                <div className={styles.logo_subtitle}>COSMETIC</div>
              </div>
              <h2>
                {currentTab === "login" ? "Ch√†o m·ª´ng tr·ªü l·∫°i" : "T·∫°o t√†i kho·∫£n"}
              </h2>
              <p className={styles.subtitle}>
                {currentTab === "login"
                  ? "ƒêƒÉng nh·∫≠p ƒë·ªÉ kh√°m ph√° b·ªô s∆∞u t·∫≠p m·ªπ ph·∫©m cao c·∫•p c·ªßa Pure"
                  : "Tham gia Pure ƒë·ªÉ tr·∫£i nghi·ªám c√°c s·∫£n ph·∫©m l√†m ƒë·∫πp tuy·ªát v·ªùi"}
              </p>

              <div className={styles.auth_tabs}>
                <button
                  className={`${styles.tab_button} ${
                    currentTab === "login" ? styles.active : ""
                  }`}
                  onClick={() => {
                    setCurrentTab("login");
                    navigate("/login");
                  }}
                >
                  ƒêƒÉng nh·∫≠p
                </button>
                <button
                  className={`${styles.tab_button} ${
                    currentTab === "register" ? styles.active : ""
                  }`}
                  onClick={() => {
                    setCurrentTab("register");
                    navigate("/register");
                  }}
                >
                  ƒêƒÉng k√Ω
                </button>
              </div>
            </div>

            <form className={styles.form} onSubmit={handleSubmit(onSubmit)}>
              <div className={styles.form_group}>
                <label>Email</label>
                <input
                  type="email"
                  placeholder="Nh·∫≠p email c·ªßa b·∫°n"
                  {...register("email", {
                    required: "Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
                    pattern: {
                      value: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/,
                      message: "Email kh√¥ng h·ª£p l·ªá",
                    },
                  })}
                  className={errors.email ? styles.input_error : ""}
                />
                {errors.email && (
                  <div className={styles.error_message}>
                    ‚ö†Ô∏è {errors.email.message}
                  </div>
                )}
              </div>

              {currentTab === "register" && (
                <>
                  <div className={styles.form_group}>
                    <label>T√™n ƒëƒÉng nh·∫≠p</label>
                    <input
                      type="text"
                      placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p"
                      {...register("username", {
                        required: "T√™n ƒëƒÉng nh·∫≠p kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
                        minLength: {
                          value: 4,
                          message: "T√™n ƒëƒÉng nh·∫≠p ph·∫£i t·ª´ 4 k√Ω t·ª±",
                        },
                      })}
                      className={errors.username ? styles.input_error : ""}
                    />
                    {errors.username && (
                      <div className={styles.error_message}>
                        ‚ö†Ô∏è {errors.username.message}
                      </div>
                    )}
                  </div>

                  <div className={styles.form_group}>
                    <label>S·ªë ƒëi·ªán tho·∫°i</label>
                    <input
                      type="tel"
                      placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                      {...register("phone", {
                        required: "S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
                        pattern: {
                          value: /^[0-9]{10,}$/,
                          message: "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá",
                        },
                      })}
                      className={errors.phone ? styles.input_error : ""}
                    />
                    {errors.phone && (
                      <div className={styles.error_message}>
                        ‚ö†Ô∏è {errors.phone.message}
                      </div>
                    )}
                  </div>
                </>
              )}

              <div className={styles.form_group}>
                <label>M·∫≠t kh·∫©u</label>
                <div className={styles.password_wrapper}>
                  <input
                    type={passwordVisible ? "text" : "password"}
                    placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                    {...register("passWord", {
                      required: "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
                      minLength: {
                        value: 4,
                        message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 4 k√Ω t·ª±",
                      },
                    })}
                    className={errors.passWord ? styles.input_error : ""}
                  />
                  <span
                    className={styles.eye_icon}
                    onClick={() => setPasswordVisible(!passwordVisible)}
                  >
                    {passwordVisible ? <FaEyeSlash /> : <FaEye />}
                  </span>
                </div>
                {errors.passWord && (
                  <div className={styles.error_message}>
                    ‚ö†Ô∏è {errors.passWord.message}
                  </div>
                )}
              </div>

              {currentTab === "register" && (
                <div className={styles.form_group}>
                  <label>X√°c nh·∫≠n m·∫≠t kh·∫©u</label>
                  <div className={styles.password_wrapper}>
                    <input
                      type={confirmPasswordVisible ? "text" : "password"}
                      placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                      {...register("confirmPassWord", {
                        required: "Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u",
                        validate: (value) =>
                          value === getValues("passWord") ||
                          "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp",
                      })}
                      className={
                        errors.confirmPassWord ? styles.input_error : ""
                      }
                    />
                    <span
                      className={styles.eye_icon}
                      onClick={() =>
                        setConfirmPasswordVisible(!confirmPasswordVisible)
                      }
                    >
                      {confirmPasswordVisible ? <FaEyeSlash /> : <FaEye />}
                    </span>
                  </div>
                  {errors.confirmPassWord && (
                    <div className={styles.error_message}>
                      ‚ö†Ô∏è {errors.confirmPassWord.message}
                    </div>
                  )}
                </div>
              )}

              <div className={styles.form_options}>
                <label className={styles.remember_me}>
                  <input type="checkbox" />
                  <span>Ghi nh·ªõ m·∫≠t kh·∫©u</span>
                </label>
                {currentTab === "login" && (
                  <Link to="/reset-password" className={styles.forgot_password}>
                    Qu√™n m·∫≠t kh·∫©u?
                  </Link>
                )}
              </div>

              <button className={styles.submit_button} type="submit">
                {currentTab === "login" ? "ƒêƒÉng nh·∫≠p ngay" : "T·∫°o t√†i kho·∫£n"}
              </button>

              {currentTab === "login" && (
                <div className={styles.social_login}>
                  <div className={styles.divider}>
                    <span>Ho·∫∑c ƒëƒÉng nh·∫≠p v·ªõi</span>
                  </div>
                  <div className={styles.social_buttons}>
                    <div
                      className={`${styles.social_button} ${styles.facebook}`}
                    >
                      <img src={logo_fb} alt="Facebook" />
                    </div>
                    <div
                      className={`${styles.social_button} ${styles.google}`}
                      onClick={handleGoogleLogin}
                    >
                      <img src={logo_gg} alt="Google" />
                    </div>
                  </div>
                </div>
              )}

              <div className={styles.auth_switch}>
                {currentTab === "login" ? (
                  <>
                    B·∫°n ch∆∞a c√≥ t√†i kho·∫£n?
                    <Link to="/register" className={styles.switch_link}>
                      ƒêƒÉng k√Ω ngay
                    </Link>
                  </>
                ) : (
                  <>
                    B·∫°n ƒë√£ c√≥ t√†i kho·∫£n?
                    <Link to="/login" className={styles.switch_link}>
                      ƒêƒÉng nh·∫≠p
                    </Link>
                  </>
                )}
              </div>
            </form>
          </div>
        </div>
      </GoogleOAuthProvider>
    </>
  );
};

export default AuthForm;
